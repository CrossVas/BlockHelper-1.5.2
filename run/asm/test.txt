{
mv = cw.visitMethod(ACC_PUBLIC, "test", "(I)V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(31, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "codechicken/core/asm/ASMDev", "perp", "Lcodechicken/core/asm/ASMDev$Test;");
Label l1 = new Label();
mv.visitJumpInsn(IFNULL, l1);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitLineNumber(32, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "codechicken/core/asm/ASMDev", "perp", "Lcodechicken/core/asm/ASMDev$Test;");
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "codechicken/core/asm/ASMDev$Test", "invoke", "(I)V");
mv.visitLabel(l1);
mv.visitLineNumber(33, l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitLocalVariable("this", "Lcodechicken/core/asm/ASMDev;", null, l0, l3, 0);
mv.visitLocalVariable("c", "I", null, l0, l3, 1);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
